# settings for general obstacle avoidance
obstacles:
  enabled: bool         # set `true` to enable this constraint in the controller
  constraint_type: hard | soft  # `soft` not fully supported

  # minimum distance to enforce between objects
  minimum_distance: float, positive

  # list of pairs of str
  # defines the pairs of links which should be constrained not to collide
  collision_pairs:
    - [link1, link2]  # for example

  # list of dynamic obstacles
  dynamic:
    -
      name: str                # name of the dynamic obstacle
      radius: float, positive  # radius of the dynamic obstacle

      # modes of the obstacle
      modes:
        -
          # this mode is active from this time until mode with the next time
          time: float, non-negative

          # state of the obstacle at the start of the mode
          position: list of float, length 3
          velocity: list of float, length 3
          acceleration: list of float, length 3

# the controller can be initialized around some operating points
# may not fully supported
operating_points:
  enabled: bool  # leave `false`

# list of the balanced object parameters from the perspective of the controller
objects:
  object_name: # name of the object

    # type of shape
    shape: cuboid | cylinder | wedge

    # parameters for different shape types
    side_lengths: list of float, length 3  # side lengths of a cuboid or wedge
    radius: float, non-negative            # radius of a cylinder
    height: float, non-negative            # height of a cylinder

    # offset of the center of mass from the shape's centroid
    com_offset: list of float, length 3

    # that mass of the object
    mass: float, non-negative

    # the diagonal of the inertia matrix about the CoM
    # this is optional; if not specified, shape is assumed to have uniform
    # density
    inertia_diag: list of float, length 3, non-negative

# arrangements of the objects
arrangements:
  arrangement_name:
    objects:  # list of objects composing the arrangement
      -
        name: str  # the name of this particular object
        type: str  # the type of the object; must correspond to an entry in `objects`
        parent: str  # name of (one of) the object(s) this one is placed upon

        # optional offset of this object's CoM in the horizontal plane w.r.t.
        # the parent's CoM
        # all the entries under offset are also optional and default to zero
        # if not provided
        offset:
          x: float  # x-component
          y: float  # y-component

          # polar coordinates can also be used
          # if both Cartesian and polar coordinates are used, they are added
          # together
          r: float  # distance
          Î¸: float  # angle

    # define the contact planes in the arrangement
    contacts:
      -
        first: str   # name of the first object in the contact pair
        second: str  # name of the second object

        mu: float, non-negative  # friction coefficient

        # safety margin for the controller
        # the balancing constraints are formulated as if the friction
        # coefficient is `mu - mu_margin`
        mu_margin: float, non-negative

        # safety margin for the controller
        # contact points are pulled in by this amount so that the balancing
        # constraints are more conservative
        support_area_inset: float, non-negative
